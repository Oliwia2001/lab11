# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd example-app/
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH=$PATH:$HOME/.local/bin
        poetry debug info
        poetry install --no-root
        poetry run task test
        poetry run task lint
        poetry run task formatter
        poetry run task security

name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Równoległe grupowanie zadań
  install_dependencies:
    runs-on: ubuntu-latest
    concurrency:
      group: install-dependencies
      cancel-in-progress: true  # Opcjonalnie, aby przerywać poprzednie zadania przy nowym uruchomieniu
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies with Poetry
        run: poetry install

  # Równoległe testy statyczne
  lint:
    runs-on: ubuntu-latest
    needs: install_dependencies  # Czeka na zakończenie zadania instalacji zależności
    concurrency:
      group: static-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run linter
        run: |
          poetry run flake8 .

  formatter:
    runs-on: ubuntu-latest
    needs: install_dependencies  # Czeka na zakończenie zadania instalacji zależności
    concurrency:
      group: static-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run formatter
        run: |
          poetry run black --check .

  security:
    runs-on: ubuntu-latest
    needs: install_dependencies  # Czeka na zakończenie zadania instalacji zależności
    concurrency:
      group: static-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security checks
        run: |
          poetry run bandit -r .

  # Testy jednostkowe
  unit_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies  # Czeka na zakończenie zadania instalacji zależności
    concurrency:
      group: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run unit tests
        run: |
          poetry run pytest tests/

